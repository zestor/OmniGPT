function onOpen() {
  // Add custom menu to the Google Sheet
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('OpenAI RFP')
    .addItem('Process Current Row', 'processCurrentRow')
    .addItem('Process All Rows', 'processAllRows')
    .addToUi();
}

function processCurrentRow() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var row = sheet.getActiveCell().getRow();
  var rfpNumber = sheet.getRange(row, 1).getValue();
  var rfpQuestion = sheet.getRange(row, 2).getValue();
  if (rfpNumber && rfpQuestion) {
    processRow(sheet, row);
  }
}

function processAllRows() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var lastRow = sheet.getLastRow();
  for (var row = 2; row <= lastRow; row++) {
    var rfpNumber = sheet.getRange(row, 1).getValue();
    var rfpQuestion = sheet.getRange(row, 2).getValue();
    if (rfpNumber && rfpQuestion) {
      processRow(sheet, row);
    }
  }
}

function processRow(sheet, row) {
  var rfpNumber = sheet.getRange(row, 1).getValue();
  var rfpQuestion = sheet.getRange(row, 2).getValue();
  if (rfpNumber && rfpQuestion) {
    var prompt = "As a Salesforce infrastructure and environmental expert with detailed knowledge of the inner infrastructure workings of Salesforce, answer the following RFP question:\n" +
                 "RFP Requirement Number: " + rfpNumber + "\n" +
                 "RFP Question: " + rfpQuestion + "\n" +
                 "Answer:";
    var response = generateResponse(sheet,row,prompt);
    sheet.getRange(row, 3).setValue(response);
  }
}

function generateResponse(sheet,row,prompt) {
  var apiKey = '<YOUR_OPEN_AI_KEY>';
  var url = 'https://api.openai.com/v1/chat/completions';
  var data = {
    'model': 'gpt-3.5-turbo',
    'temperature': 0.5,
    'messages': [{"role": "user", "content": prompt}],
    'max_tokens': 1024
  };
  var options = {
    'method': 'post',
    'contentType': 'application/json',
    'payload': JSON.stringify(data),
    'headers': {
      'Authorization': 'Bearer ' + apiKey
    },
    'muteHttpExceptions': true
  };
  var response = UrlFetchApp.fetch(url, options);
  var json = JSON.parse(response.getContentText());
  return json.choices[0].message.content;
}
